
AMRC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000782  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000693  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ea  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 75 00 	call	0xea	; 0xea <main>
  88:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pwm_init>:
	return UDR0;
}

void pwm_init() {
	// Set PWM pins as output
	DDRD |= (1<<MOTOR1_PWM) | (1<<MOTOR2_PWM);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 66       	ori	r24, 0x60	; 96
  94:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<MOTOR1_DIR) | (1<<MOTOR2_DIR);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8c 60       	ori	r24, 0x0C	; 12
  9a:	8a b9       	out	0x0a, r24	; 10

	// Set Fast PWM mode, non-inverted
	TCCR0A = (1<<WGM00) | (1<<WGM01) | (1<<COM0A1) | (1<<COM0B1);
  9c:	83 ea       	ldi	r24, 0xA3	; 163
  9e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1<<TOIE0);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	// Set prescaler to 64 and start PWM
	TCCR0B = (1<<CS01) | (1<<CS00);
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	85 bd       	out	0x25, r24	; 37
  aa:	08 95       	ret

000000ac <set_motor_speed>:
}

void set_motor_speed(int motor, int speed) {
	if (motor == 1) {
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	69 f4       	brne	.+26     	; 0xcc <set_motor_speed+0x20>
		if (speed >= 0) {
  b2:	77 23       	and	r23, r23
  b4:	2c f0       	brlt	.+10     	; 0xc0 <set_motor_speed+0x14>
			PORTD &= ~(1<<MOTOR1_DIR); // Set direction to forward
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	8b 7f       	andi	r24, 0xFB	; 251
  ba:	8b b9       	out	0x0b, r24	; 11
			OCR0A = speed; // Set PWM duty cycle
  bc:	67 bd       	out	0x27, r22	; 39
  be:	08 95       	ret
			} else {
			PORTD |= (1<<MOTOR1_DIR); // Set direction to backward
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	8b b9       	out	0x0b, r24	; 11
			OCR0A = -speed; // Set PWM duty cycle
  c6:	61 95       	neg	r22
  c8:	67 bd       	out	0x27, r22	; 39
  ca:	08 95       	ret
		}
		} else if (motor == 2) {
  cc:	02 97       	sbiw	r24, 0x02	; 2
  ce:	61 f4       	brne	.+24     	; 0xe8 <set_motor_speed+0x3c>
		if (speed >= 0) {
  d0:	77 23       	and	r23, r23
  d2:	2c f0       	brlt	.+10     	; 0xde <set_motor_speed+0x32>
			PORTD &= ~(1<<MOTOR2_DIR); // Set direction to forward
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	8b b9       	out	0x0b, r24	; 11
			OCR0B = speed; // Set PWM duty cycle
  da:	68 bd       	out	0x28, r22	; 40
  dc:	08 95       	ret
			} else {
			PORTD |= (1<<MOTOR2_DIR); // Set direction to backward
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	8b b9       	out	0x0b, r24	; 11
			OCR0B = -speed; // Set PWM duty cycle
  e4:	61 95       	neg	r22
  e6:	68 bd       	out	0x28, r22	; 40
  e8:	08 95       	ret

000000ea <main>:
			}
		}
	}
}*/
int main(void){
	pwm_init();
  ea:	0e 94 48 00 	call	0x90	; 0x90 <pwm_init>
	sei();
  ee:	78 94       	sei
	while(1){
		set_motor_speed(1, 100);
  f0:	64 e6       	ldi	r22, 0x64	; 100
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 56 00 	call	0xac	; 0xac <set_motor_speed>
		set_motor_speed(2, 100);
  fc:	64 e6       	ldi	r22, 0x64	; 100
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 56 00 	call	0xac	; 0xac <set_motor_speed>
 108:	f3 cf       	rjmp	.-26     	; 0xf0 <main+0x6>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
